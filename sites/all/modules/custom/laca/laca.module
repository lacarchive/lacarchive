<?php
/**
 * Implements hook_page_build().
 */
function laca_page_build(&$page) {
  drupal_add_css(drupal_get_path('module', 'laca').'/table.css', array('group' => CSS_THEME, 'weight' => 115));
}

/**
 * Implements hook_token_info().
 */
function laca_token_info() {

    $node_tokens['reference_number'] =  array(
      'name' => t("LACA Reference Number"),
      'description' => t("Logic to display node title on items with multiple authors"),
    );

    return array(
      'tokens' => array(
        'node' => $node_tokens,
      ),
    );
}

/**
 * Implements hook_tokens().
 */
function laca_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  // Check if token type is node
  if($type == 'node'){
    $node = $data['node'];
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'reference_number':
          $reference_number = '';
          $node_wrapper = entity_metadata_wrapper('node', $node);

          // LIBRARY LOCATION (FORMAT):
          $lib_location_term = $node_wrapper->field_lib_location->value();

          if (isset($lib_location_term)) {
            $lib_location = field_get_items('taxonomy_term', $lib_location_term, 'field_item_key');
            $reference_number .= $lib_location[0]['value'] . '.';
          }

          // NODE ID:
          $reference_number .= $node->nid . '.';

          // ARTIST (OR TITLE) ABBR:
          $artist_wrapper = $node_wrapper->field_artist_name_ref->value();
          if (isset($artist_wrapper[0])) {
            $artist = field_get_items('node', $artist_wrapper[0], 'field_artist_name');
            $artist = preg_replace('/[^a-zA-Z0-9]/', '', $artist[0]['safe']['family']);
            $artist = strtoupper(substr($artist,0,2));
            $reference_number .= $artist;
          }
          else {
            $reference_number .= strtoupper(substr(preg_replace('/[^a-zA-Z0-9]/', '', $node->title) , 0, 2));
          }

          $replacements[$original] = $reference_number;
          break;
      }
    }
  }
  return $replacements;
}
